package cu.cs.cpsc215.project1;

import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.util.Vector;

import org.jsoup.HttpStatusException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class WebPage
implements WebElement{
	static Vector m_urls = new Vector();
	
	private String m_url;
	private Vector m_pages;
	private Vector m_images;
	private Vector m_files;
	
	public WebPage(String url){
		m_url=url;
		m_pages = new Vector();
		m_images = new Vector();
		m_files = new Vector();
	}

	public void crawl(int depth, String url){
		if(depth < 0){
			return;
		}
		else{
			if(!m_urls.contains(url)){
				try{
					System.out.println(url+"      Depth = "+depth);
					Document doc = Jsoup.connect(url).get();
					Elements pages = doc.select("[href$=.htm],[href$=.html],[href$=.jsp],[href$=.asp],[href$=.php],[href$=.aspx]");
					Elements imagesHref = doc.select("[href$=.bmp],[href$=.tiff],[href$=.png],[href$=.jpg],[href$=.gif]");
					Elements imagesSrc = doc.select("[src$=.jpg],[src$=.png],[src$=.bmp],[src$=.tiff],[src$=.gif]");
					Elements files = doc.select("[href$=.doc],[href$=.docx],[href$=.txt],[href$=.pdf],[href$=.odt],[href$=.xls],[href$=.ppt],[href$=.csv]");
				
					//System.out.println(pages);
					
					
					for(int i=0; i < pages.select("a").size();i++){
						String temp = pages.select("a").get(i).absUrl("href");
						if( !this.pagesContain(temp) ){
							m_pages.add(new WebPage(temp));
						}
					}
			
					System.out.println(m_pages);
					System.out.println(m_pages.size());
					
					System.out.println("");
					
					System.out.println("Contents of imagesHref:");
					System.out.println(imagesHref);
					System.out.println("There are "+imagesHref.size()+" elements in imagesHref.\n");
					
					System.out.println("Contents of imagesSrc:");
					System.out.println(imagesSrc);
					System.out.println("There are "+imagesSrc.size()+" elements in imagesSrc.\n");
					
					System.out.println("imagesSrc.select(\"img\").size() = "+imagesSrc.select("img").size() );
					System.out.println(imagesSrc.select("input"));
					
					System.out.println(m_images.size());
					
					for(int i=0; i < imagesHref.select("a").size();i++){
						String temp = imagesHref.select("a").get(i).absUrl("href");
						if( !this.imagesContain(temp) ){
							m_images.add(new WebImage(temp));
						}	
					}
					for(int i=0; i < imagesSrc.select("img").size();i++){
						String temp = imagesSrc.select("img").get(i).absUrl("src");
						if( !this.imagesContain(temp) ){
							m_images.add(new WebImage(temp));
						}
					}
					System.out.println(m_images);
					
					System.out.println("");
				
					System.out.println(files);
					
					for(int i=0; i < files.select("a").size();i++){
						String temp = files.select("a").get(i).absUrl("href");
						if( !this.filesContain(temp) ){
							m_images.add(new WebImage(temp));
						}
					}
					System.out.println(m_files);
					
					/*for(int i =0; i<m_pages.size();i++){
						crawl(depth-1,m_pages.get(i).toString());
					}*/
					
					return;
				}catch(HttpStatusException HTTPX){
					System.out.println("Skipping "+url);
					return;
				}catch(IOException IOX){
					IOX.printStackTrace();
					System.out.println("ERROR: Bad Connection");
					System.exit(-2);
				}
			
			}
		}
	}
	
	public boolean pagesContain(String other){
		for(int i=0; i<m_pages.size(); i++){
			if(m_pages.get(i).toString() == other){
				return true;
			}
		}
		return false;
	}
	
	public boolean imagesContain(String other){
		for(int i=0; i<m_images.size(); i++){
			if(m_images.get(i).toString() == other){
				return true;
			}
		}
		return false;
	}
	
	public boolean filesContain(String other){
		for(int i=0; i<m_files.size(); i++){
			if(m_files.get(i).toString() == other){
				return true;
			}
		}
		return false;
	}
	
	public String toString(){
		return(m_url);
	}
	
	public Vector getWebImages(){
		return(m_images);
	}
	
	public Vector getWebPages(){
		return(m_pages);
	}
	
	public Vector getWebFiles(){
		return(m_files);
	}

}
